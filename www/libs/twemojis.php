<?php

class Twemojis {

/* Generated automatically by emojis_ranges.py */
	 static $map = array(
		0xa9, 0xa9, 0, 0xff,
		0xae, 0xae, 0, 0xff,
		0x203c, 0x203c, 0, 0xffff,
		0x2049, 0x2049, 0, 0xffff,
		0x2122, 0x2122, 0, 0xffff,
		0x2139, 0x2139, 0, 0xffff,
		0x2194, 0x2199, 0, 0xffff,
		0x21a9, 0x21aa, 0, 0xffff,
		0x231a, 0x231b, 0, 0xffff,
		0x23e9, 0x23ec, 0, 0xffff,
		0x23f0, 0x23f0, 0, 0xffff,
		0x23f3, 0x23f3, 0, 0xffff,
		0x24c2, 0x24c2, 0, 0xffff,
		0x25aa, 0x25ab, 0, 0xffff,
		0x25b6, 0x25b6, 0, 0xffff,
		0x25c0, 0x25c0, 0, 0xffff,
		0x25fb, 0x25fe, 0, 0xffff,
		0x2600, 0x2601, 0, 0xffff,
		0x260e, 0x260e, 0, 0xffff,
		0x2611, 0x2611, 0, 0xffff,
		0x2614, 0x2615, 0, 0xffff,
		0x261d, 0x261d, 0, 0xffff,
		0x263a, 0x263a, 0, 0xffff,
		0x2648, 0x2653, 0, 0xffff,
		0x2660, 0x2660, 0, 0xffff,
		0x2663, 0x2663, 0, 0xffff,
		0x2665, 0x2666, 0, 0xffff,
		0x2668, 0x2668, 0, 0xffff,
		0x267b, 0x267b, 0, 0xffff,
		0x267f, 0x267f, 0, 0xffff,
		0x2693, 0x2693, 0, 0xffff,
		0x26a0, 0x26a1, 0, 0xffff,
		0x26aa, 0x26ab, 0, 0xffff,
		0x26bd, 0x26be, 0, 0xffff,
		0x26c4, 0x26c5, 0, 0xffff,
		0x26ce, 0x26ce, 0, 0xffff,
		0x26d4, 0x26d4, 0, 0xffff,
		0x26ea, 0x26ea, 0, 0xffff,
		0x26f2, 0x26f3, 0, 0xffff,
		0x26f5, 0x26f5, 0, 0xffff,
		0x26fa, 0x26fa, 0, 0xffff,
		0x26fd, 0x26fd, 0, 0xffff,
		0x2702, 0x2702, 0, 0xffff,
		0x2705, 0x2705, 0, 0xffff,
		0x2708, 0x270c, 0, 0xffff,
		0x270f, 0x270f, 0, 0xffff,
		0x2712, 0x2712, 0, 0xffff,
		0x2714, 0x2714, 0, 0xffff,
		0x2716, 0x2716, 0, 0xffff,
		0x2728, 0x2728, 0, 0xffff,
		0x2733, 0x2734, 0, 0xffff,
		0x2744, 0x2744, 0, 0xffff,
		0x2747, 0x2747, 0, 0xffff,
		0x274c, 0x274c, 0, 0xffff,
		0x274e, 0x274e, 0, 0xffff,
		0x2753, 0x2755, 0, 0xffff,
		0x2757, 0x2757, 0, 0xffff,
		0x2764, 0x2764, 0, 0xffff,
		0x2795, 0x2797, 0, 0xffff,
		0x27a1, 0x27a1, 0, 0xffff,
		0x27b0, 0x27b0, 0, 0xffff,
		0x27bf, 0x27bf, 0, 0xffff,
		0x2934, 0x2935, 0, 0xffff,
		0x2b05, 0x2b07, 0, 0xffff,
		0x2b1b, 0x2b1c, 0, 0xffff,
		0x2b50, 0x2b50, 0, 0xffff,
		0x2b55, 0x2b55, 0, 0xffff,
		0x3030, 0x3030, 0, 0xffff,
		0x303d, 0x303d, 0, 0xffff,
		0x3297, 0x3297, 0, 0xffff,
		0x3299, 0x3299, 0, 0xffff,
		0xe50a, 0xe50a, 0, 0xffff,
		0x1f004, 0x1f004, 0, 0xfffff,
		0x1f0cf, 0x1f0cf, 0, 0xfffff,
		0x1f170, 0x1f171, 0, 0xfffff,
		0x1f17e, 0x1f17f, 0, 0xfffff,
		0x1f18e, 0x1f18e, 0, 0xfffff,
		0x1f191, 0x1f19a, 0, 0xfffff,
		0x1f1e6, 0x1f1ff, 0, 0xfffff,
		0x1f201, 0x1f202, 0, 0xfffff,
		0x1f21a, 0x1f21a, 0, 0xfffff,
		0x1f22f, 0x1f22f, 0, 0xfffff,
		0x1f232, 0x1f23a, 0, 0xfffff,
		0x1f250, 0x1f251, 0, 0xfffff,
		0x1f300, 0x1f320, 0, 0xfffff,
		0x1f330, 0x1f335, 0, 0xfffff,
		0x1f337, 0x1f37c, 0, 0xfffff,
		0x1f380, 0x1f393, 0, 0xfffff,
		0x1f3a0, 0x1f3c4, 0, 0xfffff,
		0x1f3c6, 0x1f3ca, 0, 0xfffff,
		0x1f3e0, 0x1f3f0, 0, 0xfffff,
		0x1f400, 0x1f43e, 0, 0xfffff,
		0x1f440, 0x1f440, 0, 0xfffff,
		0x1f442, 0x1f4f7, 0, 0xfffff,
		0x1f4f9, 0x1f4fc, 0, 0xfffff,
		0x1f500, 0x1f53d, 0, 0xfffff,
		0x1f550, 0x1f567, 0, 0xfffff,
		0x1f5fb, 0x1f640, 0, 0xfffff,
		0x1f645, 0x1f64f, 0, 0xfffff,
		0x1f680, 0x1f6c5, 0, 0xfffff,
	);

/* Regexes for double unicodes */
	 static $regexes = array(
		'/\x{1f1e8}\x{1f1f3}/u' => ' {0x1f1e8-1f1f3} ',
		'/\x{1f1e9}\x{1f1ea}/u' => ' {0x1f1e9-1f1ea} ',
		'/\x{1f1ea}\x{1f1f8}/u' => ' {0x1f1ea-1f1f8} ',
		'/\x{1f1eb}\x{1f1f7}/u' => ' {0x1f1eb-1f1f7} ',
		'/\x{1f1ec}\x{1f1e7}/u' => ' {0x1f1ec-1f1e7} ',
		'/\x{1f1ee}\x{1f1f9}/u' => ' {0x1f1ee-1f1f9} ',
		'/\x{1f1ef}\x{1f1f5}/u' => ' {0x1f1ef-1f1f5} ',
		'/\x{1f1f0}\x{1f1f7}/u' => ' {0x1f1f0-1f1f7} ',
		'/\x{1f1f7}\x{1f1fa}/u' => ' {0x1f1f7-1f1fa} ',
		'/\x{1f1fa}\x{1f1f8}/u' => ' {0x1f1fa-1f1f8} ',
		'/\x{23}\x{20e3}/u' => ' {0x23-20e3} ',
		'/\x{30}\x{20e3}/u' => ' {0x30-20e3} ',
		'/\x{31}\x{20e3}/u' => ' {0x31-20e3} ',
		'/\x{32}\x{20e3}/u' => ' {0x32-20e3} ',
		'/\x{33}\x{20e3}/u' => ' {0x33-20e3} ',
		'/\x{34}\x{20e3}/u' => ' {0x34-20e3} ',
		'/\x{35}\x{20e3}/u' => ' {0x35-20e3} ',
		'/\x{36}\x{20e3}/u' => ' {0x36-20e3} ',
		'/\x{37}\x{20e3}/u' => ' {0x37-20e3} ',
		'/\x{38}\x{20e3}/u' => ' {0x38-20e3} ',
		'/\x{39}\x{20e3}/u' => ' {0x39-20e3} ',
	);



	static function to_entities($input) {
		return mb_encode_numericentity($input, self::$map, 'UTF-8', true);
	}

	static function in_table($match) {
		$n = hexdec($match);
		if (! $n > 0) return false;
		for ($i = 0; $i < count(self::$map); $i += 4) {
			if ($n >= self::$map[$i] && $n <= self::$map[$i+1]) {
				return '0x'.dechex($n);
			}
		}
		return false;
	}

	static function normalize($input) {
		foreach (self::$regexes as $old => $new) {
			$input = preg_replace($old, $new, $input);
		}

		$callback = function ($matches) {
			if (($h = self::in_table($matches[1])) ) {
				return ' {'.$h.'} ';
			}
			return $matches[1];
		};

		$input = self::to_entities($input);
		return preg_replace_callback('/&#x([\da-f]+);/i', $callback, $input);
	}

}

